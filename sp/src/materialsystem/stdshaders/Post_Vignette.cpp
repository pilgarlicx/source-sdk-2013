/*

Copyright 2018 Highflex
All rights reserved.

Vignette Code Shader Definition

*/

#include "BaseVSShader.h"
#include "post_vignette_ps20.inc"
#include "PassThrough_vs20.inc" //files generated by compiling the fxc files

BEGIN_VS_SHADER( Post_Vignette, "Help for Post_Vignette" ) //Begin the shader
	
	// pass parameters to shader
	BEGIN_SHADER_PARAMS
		SHADER_PARAM(BASETEXTURE, SHADER_PARAM_TYPE_TEXTURE, "_rt_FullFrameFB", "Framebuffer")
		SHADER_PARAM(VOPACITY, SHADER_PARAM_TYPE_FLOAT, "1.5", "Opacity of Vignette")
		SHADER_PARAM(VINNERRADIUS, SHADER_PARAM_TYPE_FLOAT, "0.1", "Innter Radius of Vignette")
		SHADER_PARAM(VOUTERRADIUS, SHADER_PARAM_TYPE_FLOAT, "1.0", "Outer Radius of Vignette")
	//This is our shader parameter taken from the material file called NVLEVEL, write "$nvlevel" 10 for example in the .vmt
	END_SHADER_PARAMS

	SHADER_INIT_PARAMS()
	{
		SET_FLAGS2(MATERIAL_VAR2_NEEDS_FULL_FRAME_BUFFER_TEXTURE);
	}

	SHADER_FALLBACK //doesn't fallback to anything (I know this works on dx9, hasn't been tested on others)
	{
		return 0;
	}

	SHADER_INIT
	{
		if (params[BASETEXTURE]->IsDefined())
		{
			LoadTexture(BASETEXTURE);
		}
	}

	SHADER_DRAW
	{
		SHADOW_STATE
			{
				pShaderShadow->EnableTexture(SHADER_SAMPLER0, true);
				pShaderShadow->EnableDepthWrites( false ); //depth writes aren't needed 
				int fmt = VERTEX_POSITION;
				pShaderShadow->VertexShaderVertexFormat( fmt, 1, 0, 0 ); //sets the vertex format for the .fxc
				pShaderShadow->SetVertexShader( "PassThrough_vs20", 0 ); //set the vertex shader
				pShaderShadow->SetPixelShader( "post_vignette_ps20" ); //set the pixel shader
				DefaultFog();
			}
		DYNAMIC_STATE
			{
				// pass over parameters

				float Opacity = params[VOPACITY]->GetFloatValue();
				float vOpacity[4] = { Opacity, Opacity, Opacity, 1 };
				pShaderAPI->SetPixelShaderConstant(0, vOpacity);

				float InnterRadius = params[VINNERRADIUS]->GetFloatValue();
				float vInnterRadius[4] = { InnterRadius, InnterRadius, InnterRadius, 1 };
				pShaderAPI->SetPixelShaderConstant(1, vInnterRadius);

				float OuterRadius = params[VOUTERRADIUS]->GetFloatValue();
				float vOuterRadius[4] = { OuterRadius, OuterRadius, OuterRadius, 1 };
				pShaderAPI->SetPixelShaderConstant(2, vOuterRadius);

				BindTexture(SHADER_SAMPLER0, BASETEXTURE, -1);
			}
		Draw(); //draw the shader
	}

END_SHADER